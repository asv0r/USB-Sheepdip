#!/bin/bash
#
# USB-Sheepdip:  Prototype sheep dip appliance for USB security in airgapped environments to be run on a Raspberry fgstest
# Authors:  Thomas Peterson <tpeterson@foxguardsolutions.com> and Charisse Rigdon (asv0r) <crigdon@foxguardsolutions.com>
# Version: 0.4 July 2015
#


initializeLog () {		#  append header for this run to log
	printf "\n\n====================[ SDA Start : `date +%c` ]====================\n\n" | tee -a log.txt
	
}

checkMountPoints () {
        
	sudo mount -a
    df -Th | grep sd
        printf "Are these mount points correct? (y/n)\n"
        read -r input
    if  [ "$input" != "y" ]
		then
            printf "Exiting due to incorrect mount points.\n"  | tee -a ./log.txt
            exit 1
    fi
}

updateAV () {			#  update clamav definitions

		printf " `date +%T`: Are the latest Clamav updates in the clamav directory on the outside USB drive (y/n).\n" | tee -a ./log.txt
		read -r input 
	if  [ "$input" != "y" ]
		then  
			printf "Exiting due to lack of current Clamav update, please update to the latest definitions before continuing."
			sudo umount -v /dev/ada1
			exit 1
	else  
			sudo cp /home/fgstest/USBs/outside/clamav/* /home/fgstest/clamav_update/
			sudo service clamav-freshclam restart 	#restarts freshclam so updated definitions are used for scan.
	fi
	
}

scanOutside () {		#  scan the outside USB drive, display infected files, remove them and write the output to a log file in the users home directory home/ada1

	printf "\n\n====================[ `date +%T`:  Scanning the outside USB now...]====================\n\n" | tee -a ./log.txt
	sudo clamscan -v -r --move=/home/fgstest/virus /home/fgstest/USBs/outside | tee -a ./log.txt
	
	if [ $? == 0 ]
		then 
			printf "Virus scan complete no threat found \n"
			
	elif [ $? == 1 ]
		then 
			printf "*** VIRUSES FOUND, DO NOT USE THESE FILES! ***\n" | tee -a ./log.txt 
			exit 1
	else
			printf "Error occurred with virus scan.\n" | tee -a ./log.txt
			exit 1
			
	fi	
}

scanInside () {			#  scan the inside USB drive, display infected files, remove them and write the output to a log file in the users home directory home/ada1

	printf "\n\n====================[ `date +%T`:  Scanning the inside USB now...]====================\n \n" | tee -a ./log.txt
	sudo clamscan -v -r --move=/home/fgstest/virus /home/fgstest/USBs/inside | tee -a ./log.txt
	
	if [ $? == 0 ]
		then 
			printf "Virus scan complete no threat found \n"
			
	elif [ $? == 1 ]
		then 
			printf "*** VIRUSES FOUND, DO NOT USE THESE FILES! ***\n" | tee -a ./log.txt 
			exit 1
	else
			printf "Error occurred with virus scan.\n" | tee -a ./log.txt
			exit 1
			
	fi	
}

shredInside () {		#  secure erase the inside USB drive, the default setting writes 38 times and write the output to the log file

	printf "\n\n====================[ `date +%T`:  Shredding inside USB now...]====================\n\n" | tee -a ./log.txt
	sudo umount -v /dev/adb1 | tee -a ./log.txt
	sudo shred -v -z -n 0 /dev/adb1 | tee -a ./log.txt		#  no overwriting; just one pass of writing zeroes
	
	if [ $? != 0 ]
		then
			printf " `date +%T`: ERROR: shred failed.  Please check logs before continuing. Attempting to format USB now...\n"
            exit 1
    	fi
	        
}

formatInside () {		#  format USB drive to FAT32 

	printf "\n\n====================[ `date +%T`:  Creating new FAT32 filesystem on inside USB...]====================\n\n"
	sudo mkdosfs -v -F 32 -I /dev/adb1 | tee -a ./log.txt
	
	if [ $? == 0 ]
		then
			printf " `date +%T`:  USB formatted.\n"
		else
			printf " `date +%T`:  ERROR: Unable to format drive.\n"
			exit 1
	fi
}

remount () {			#  remount the drive to prepare for copy

	sudo mount -v -t vfat /dev/adb1 /home/fgstest/USBs/inside | tee -a ./log.txt

}

copyOutsideToInside () {	# copy everything on outside USB to newly formatted inside USB

	printf "\n\n====================[ `date +%T`:  Copying USB now...]====================\n\n" | tee -a ./log.txt
	cp /home/fgstest/USBs/outside/* /home/fgstest/USBs/inside/ | tee -a ./log.txt
	printf "`date +%T`:  Process complete. * WARNING: CHECK THE LOG FILE BEFORE CONTINUING *\n"
}

removeUsb ()  {		# unmount USB drives so they can be safley removed 

	printf " `date +%T`:Unmounting USB now standby... \n" |tee -a ./log.txt 
	sudo umount /dev/ada1
	sudo umount /dev/adb1
	printf "\n\n====================[ Unmount complete USBs can be safely removed ]====================\n\n" | tee -a ./log.txt 
	
}

finishLog () {		#  append footer for this run to log

	printf "\n====================[ *** WARNING CHECK THE LOG FILE BEFORE CONTINUING *** ]====================\n" | ./tee -a log.txt
	printf "\n====================[ End : `date +%c` ]====================\n" | tee -a log.txt
}


initializeLog

checkMountPoints
updateAV
scanOutside
scanInside
shredInside
formatInside
remount
copyOutsideToInside
removeUsb

finishLog






